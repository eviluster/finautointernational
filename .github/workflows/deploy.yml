name: Deploy via SCP

on:
  push:
    branches: [staging]

jobs:
  deploy:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üì§ Transferir archivos al VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        port: ${{ secrets.SSH_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "./"
        target: "/home/finauto/full-proyect-1"
        strip_components: 1
        
    - name: üöÄ Ejecutar despliegue en VPS
      uses: appleboy/ssh-action@v1.2.0
      id: deploy
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script_stop: true
        script: |
          # Verificar directorios
          echo "üîç Verificando directorios..."
          ls -la /home/finauto/full-proyect-1/
          
          # Backup de la versi√≥n actual (excluyendo db-data, certbot y nginx/data)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_DIR="/home/finauto/backups/$TIMESTAMP"
          mkdir -p "$BACKUP_DIR"
          echo "üì¶ Creando backup en $BACKUP_DIR"
          
          # Usar find para excluir db-data, certbot y nginx/data
          find /home/finauto/full-proyect-1 -mindepth 1 -maxdepth 1 ! -name 'db-data' ! -name 'certbot' ! -path '*/nginx/data*' ! -path '*/nginx/letsencrypt*' -exec cp -r {} "$BACKUP_DIR/" \;
          echo "‚úÖ Backup completado"
          
          # Guardar la ruta del backup en una variable local
          echo "BACKUP_DIR=$BACKUP_DIR" > /tmp/backup_dir.txt

          # Despliegue
          echo "üöÄ Iniciando despliegue..."
          cd /home/finauto/full-proyect-1
          docker compose down -v --rmi all || true
          docker builder prune -af
          docker compose up -d --build
          echo "‚úÖ Despliegue completado"

    - name: üì± Notificar fallo de despliegue a Telegram
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ‚ùå *Fallo en el despliegue*
          Repositorio: ${{ github.repository }}
          Rama: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Autor: ${{ github.actor }}
          Fecha: ${{ github.event.head_commit.timestamp }}
          Pipeline: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Se iniciar√° el proceso de rollback.
        format: html

  rollback:
    needs: [deploy]
    if: ${{ failure() }}
    runs-on: ubuntu-24.04
    steps:
    - name: üì± Notificar inicio de rollback a Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          üîÑ *Inicio de rollback*
          Repositorio: ${{ github.repository }}
          Rama: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Autor: ${{ github.actor }}
          Fecha: ${{ github.event.head_commit.timestamp }}
          Pipeline: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        format: html

    - name: üîÑ Restaurar versi√≥n anterior
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Obtener √∫ltimo backup
          echo "üîç Buscando √∫ltimo backup..."
          LATEST_BACKUP=$(ls -td /home/finauto/backups/* | head -1)
          
          if [ -z "$LATEST_BACKUP" ]; then
            echo "‚ùå No hay backups disponibles"
            exit 1
          fi
          
          echo "üì¶ √öltimo backup encontrado: $LATEST_BACKUP"

          # Restauraci√≥n (excluyendo db-data, certbot y nginx/data)
          echo " Restaurando backup..."
          
          # Eliminar todo excepto db-data y certbot
          find /home/finauto/full-proyect-1 -mindepth 1 -maxdepth 1 ! -name 'db-data' ! -name 'certbot' -exec rm -rf {} \;
          
          # Copiar todo del backup excepto nginx/data y nginx/letsencrypt
          find "$LATEST_BACKUP" -mindepth 1 -maxdepth 1 ! -name 'db-data' ! -name 'certbot' ! -path '*/nginx/data*' ! -path '*/nginx/letsencrypt*' -exec cp -r {} /home/finauto/full-proyect-1/ \;
          echo "‚úÖ Restauraci√≥n completada"
          
          # Reiniciar servicios anteriores
          echo "üîÑ Reiniciando servicios..."
          cd /home/finauto/full-proyect-1
          docker compose down -v --rmi all
          docker compose up -d --build
          echo "‚úÖ Rollback completado exitosamente"

    - name: üì± Notificar fallo de rollback a Telegram
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ‚ùå *Fallo en el rollback*
          Repositorio: ${{ github.repository }}
          Rama: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Autor: ${{ github.actor }}
          Fecha: ${{ github.event.head_commit.timestamp }}
          Pipeline: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Se requiere intervenci√≥n manual.
        format: html